import torch
import torch.nn as nn


class MetaAcon(nn.Module):
    r""" ACON activation (activate or not).
    # MetaAconC: (p1*x-p2*x) * sigmoid(beta*(p1*x-p2*x)) + p2*x, beta is generated by a small network
    # according to "Activate or Not: Learning Customized Activation" <https://arxiv.org/pdf/2009.04759.pdf>.
    """
    def __init__(self, in_channel, r=16):
        super(MetaAcon, self).__init__()
        self.fc1 = nn.Conv2d(in_channel, max(r, in_channel // r), kernel_size=1, stride=1, bias=True)
        self.bn1 = nn.BatchNorm2d(max(r, in_channel // r))
        self.fc2 = nn.Conv2d(max(r, in_channel // r), in_channel, kernel_size=1, stride=1, bias=True)
        self.bn2 = nn.BatchNorm2d(in_channel)

        self.p1 = nn.Parameter(torch.randn(1, in_channel, 1, 1))
        self.p2 = nn.Parameter(torch.randn(1, in_channel, 1, 1))

    def forward(self, x):
        beta = torch.sigmoid(self.bn2(self.fc2(self.bn1(self.fc1(x.mean(dim=2, keepdims=True).mean(dim=3, keepdims=True))))))

        return (self.p1 * x - self.p2 * x) * torch.sigmoid(beta * (self.p1 * x - self.p2 * x)) + self.p2 * x


